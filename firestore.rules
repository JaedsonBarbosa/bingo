rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function verificarCamposData(data, obrigatorio, opcional) {
      let permitidos = obrigatorio.concat(opcional);
      return data.keys().hasAll(obrigatorio) &&
      data.keys().hasOnly(permitidos);
    }

    function verificarCampos(obrigatorio, opcional) {
      return verificarCamposData(request.resource.data, obrigatorio, opcional);
    }

    function buscarUsuario() {
      return get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data;
    }

    function getAdmin(data) {
      return data.keys().hasAll(['admin']) && data.admin
    }

    function isAdmin() {
      return request.auth.uid == 'SwHkTu4OPmd42zhPKzYa5Wh3Y6i2' || getAdmin(buscarUsuario());
    }

    function existeJogoAtivo() {
      return exists(/databases/$(database)/documents/geral/jogo);
    }

    function getNumerosJogo() {
      return get(/databases/$(database)/documents/geral/jogo).data.numeros;
    }

    match /geral/jogo {
      function jogoValido() {
        let data = request.resource.data;
        return verificarCampos(['numeros', 'titulo', 'organizador'], [])
          && data.numeros.size() == 0;
      }

      function atualizacaoValida() {
        let tituloIgual = resource.data.titulo == request.resource.data.titulo;
        let novaListaEhUniao = request.resource.data.numeros.hasAll(resource.data.numeros);
        let novoNumero = request.resource.data.numeros.removeAll(resource.data.numeros);
        let numeroRepetido = novoNumero.hasAny(resource.data.numeros);
        let apenasUmNovoNumero = novoNumero.size() == 1;
        return tituloIgual && novaListaEhUniao && !numeroRepetido && apenasUmNovoNumero;
      }

      allow read: if request.auth != null;
      allow create: if isAdmin() && jogoValido();
      allow delete: if isAdmin();
      allow update: if isAdmin() && atualizacaoValida();
    }

    match /geral/jogo/cartelas/{cartela} {
      function numerosValidos(numeros) {
        let b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15].toSet();
        let i = [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30].toSet();
        let n = [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45].toSet();
        let g = [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60].toSet();
        let o = [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75].toSet();
        return numeros.intersection(b).size() == 5
          && numeros.intersection(i).size() == 5
          && numeros.intersection(n).size() == 4
          && numeros.intersection(g).size() == 5
          && numeros.intersection(o).size() == 5;
      }

      function cartelaValida() {
        let numeros = request.resource.data.numeros;
        let numerosSet = numeros.toSet();
        return numeros.size() == 24
          && numerosSet.size() == 24
          && request.resource.data.ganhou == false
          && numerosValidos(numerosSet);
      }

      allow read: if resource.id == request.auth.uid || isAdmin();
      allow create: if request.resource.id == request.auth.uid
        && verificarCampos(['numeros', 'ganhou'], [])
        && cartelaValida()
        && existeJogoAtivo()
        && getNumerosJogo().size() == 0;
      allow update: if (resource.id == request.auth.uid || isAdmin())
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['ganhou'])
        && (!request.resource.data.ganhou || getNumerosJogo().hasAll(resource.data.numeros));
      allow delete: if isAdmin();
    }

    match /jogos/{jogo} {
      function ganhadorValido() {
        let ganhador = request.resource.data.ganhador;
        let user = get(/databases/$(database)/documents/usuarios/$(ganhador.id)).data;
        let cartela = get(/databases/$(database)/documents/geral/jogo/cartelas/$(ganhador.id)).data;
        return verificarCamposData(ganhador, ['telefone', 'nome', 'estado', 'municipio', 'id'], ['admin', 'deficiente'])
          && ganhador.telefone == user.telefone
          && ganhador.nome == user.nome
          && ganhador.estado == user.estado
          && ganhador.municipio == user.municipio
          && getNumerosJogo().hasAll(cartela.numeros);
      }

      function organizadorValido() {
        let organizador = request.resource.data.organizador;
        let user = buscarUsuario();
        return verificarCamposData(organizador, ['telefone', 'nome', 'estado', 'municipio'], ['admin', 'deficiente'])
          && organizador.telefone == user.telefone
          && organizador.nome == user.nome
          && organizador.estado == user.estado
          && organizador.municipio == user.municipio;
      }

      allow read: if request.auth != null;
      allow write: if existeJogoAtivo() && isAdmin()
        && verificarCampos(['numeros', 'titulo', 'organizador', 'ganhador', 'data'], [])
        && request.resource.data.numeros.size() >= 24
        && request.resource.data.data == request.time
        && organizadorValido()
        && ganhadorValido();
    }

    match /usuarios/{usuario} {
      allow read: if resource == null || resource.id == request.auth.uid || isAdmin();
      allow create, update: if request.resource.id == request.auth.uid
        && verificarCampos(['telefone', 'nome', 'estado', 'municipio'], ['admin', 'deficiente'])
        && (!getAdmin(request.resource.data) || getAdmin(resource.data));
      allow delete: if false;
    }
  }
}
